{"version":3,"sources":["search.jsx","filter.jsx","loader.jsx","error.jsx","pagination.jsx","github-info.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Search","setQuery","useState","entered","setEntered","onSubmit","event","preventDefault","placeholder","value","onChange","e","target","className","type","aria-label","aria-hidden","Filter","setLicense","licences","setLicences","useEffect","fetch","then","res","json","data","catch","list","map","license","key","name","defaultValue","disabled","Loader","src","alt","Error","Pagination","pages","setPages","total","current","choosePage","page","state","window","scrollTo","onClick","title","GitHubInfo","query","repos","setRepo","loading","setLoading","error","setError","filter","monthAgo","Date","now","toISOString","slice","url","items","Math","ceil","total_count","requestAPI","repo","id","href","html_url","stargazers_count","oldDate","created_at","toLocaleDateString","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.8e2e9cd1.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport default function Search({ setQuery }) {\n  const [entered, setEntered] = useState('');\n\n  const onHandleChange = (e) => setEntered(e.target.value);\n\n  const onHandleSubmit = (event) => {\n    event.preventDefault();\n    setQuery(entered);\n  };\n\n  return (\n    <form onSubmit={onHandleSubmit}>\n      <input\n        placeholder=\"Search by repo's name...\"\n        value={entered}\n        onChange={onHandleChange}\n        className=\"search\"\n      />\n      <button type=\"submit\" aria-label=\"search\"><i className=\"fa fa-search\" aria-hidden=\"true\" /></button>\n    </form>\n  );\n}\n","import React, { useState, useEffect } from 'react';\n\nexport default function Filter({ setLicense }) {\n  const [licences, setLicences] = useState([]);\n\n  useEffect(() => {\n    fetch('https://api.github.com/licenses')\n      .then((res) => res.json())\n      .then((data) => setLicences(data))\n      .catch(() => setLicences(['Something went wrong. Try again later']));\n    return () => {\n    };\n  }, []);\n\n  const list = licences.map((license) => (\n    <option key={license.key} value={license.key}>\n      {license.name}\n    </option>\n  ));\n\n  const onHandleChange = (event) => {\n    setLicense(event.target.value);\n  };\n\n  return (\n    <div className=\"select\">\n      <select defaultValue=\"DEFAULT\" onChange={onHandleChange} className=\"browser-default\">\n        <option value=\"DEFAULT\" disabled>\n          Select license to filter\n        </option>\n        {list}\n      </select>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Loader() {\n  return (\n    <div>\n      <img src=\"../loader.gif\" alt=\"loading...\" />\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Error() {\n  return (\n    <div>\n      <h2>Something went wrong. Try again later</h2>\n      <img className=\"error\" src=\"../error.png\" alt=\"error... something went wrong\" />\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Pagination({ pages, setPages }) {\n  const { total, current } = pages;\n\n  function choosePage(page) {\n    if (page >= 1) {\n      setPages((state) => ({ ...state, current: page }));\n      window.scrollTo(0, 0);\n    }\n  }\n\n  return (\n    <div className=\"pagination\">\n      <button className={current === 1 ? 'disabled' : ''} onClick={() => choosePage(1)}>\n        {'<<'}\n      </button>\n      <button className={current === 1 ? 'disabled' : ''} onClick={() => choosePage(current - 1)}>\n        {'<'}\n      </button>\n      <button className=\"active\">\n        {current}\n      </button>\n      <button className={current === total ? 'disabled' : ''} onClick={() => choosePage(current + 1)} title={current + 1}>\n        {'>'}\n      </button>\n      <button className={current === total ? 'disabled' : ''} onClick={() => choosePage(total)} title={total}>\n        {'>>'}\n      </button>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport Loader from './loader';\nimport Error from './error';\nimport Pagination from './pagination';\n\nexport default function GitHubInfo({ license, query }) {\n  const [repos, setRepo] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [pages, setPages] = useState({ total: 1, current: 1 });\n\n  function requestAPI(filter = '') {\n    const monthAgo = new Date(Date.now() - 1000 * 3600 * 24 * 31).toISOString().slice(0, 10);\n    const url = `https://api.github.com/search/repositories?q=${query}+language:javascript+created%3A%3E${monthAgo}${filter}&sort=stars&page=${pages.current}`;\n    setError(false);\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        setRepo(data.items);\n        const total = Math.ceil((data.total_count > 1000 ? 1000 : data.total_count) / 30);\n        setPages({ total, current: pages.current });\n      })\n      .then(() => setLoading(false))\n      .catch(() => setError(true));\n  }\n\n  useEffect(() => {\n    let filter = '';\n    if (license) filter = `+license:${license}`;\n    setLoading(true);\n    requestAPI(filter);\n    return () => { };\n  }, [license, query, pages.current]);\n\n  function dateFormatter(oldDate) {\n    return new Date(oldDate).toLocaleDateString();\n  }\n\n  const list = repos.map((repo) => (\n    <div key={repo.id}>\n      <h4>\n        <a href={repo.html_url}>{repo.name}</a>\n        <span>\n          <sup>\n            <i className=\"fa fa-star\" aria-hidden=\"true\" />\n            {' '}\n            {repo.stargazers_count}\n          </sup>\n          <sub>\n            <i className=\"fa fa-calendar\" aria-hidden=\"true\" />\n            {' '}\n            {dateFormatter(repo.created_at)}\n          </sub>\n        </span>\n      </h4>\n    </div>\n  ));\n\n  if (error) return <Error />;\n\n  return (\n    <>\n      {loading ? <Loader /> : list }\n      {pages.total > 1 ? <Pagination pages={pages} setPages={setPages} /> : null}\n    </>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport Search from './search';\nimport Filter from './filter';\nimport GitHubInfo from './github-info';\nimport './App.css';\n\nfunction App() {\n  const [license, setLicense] = useState(null);\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n  }, [license, query]);\n\n  return (\n    <>\n      <header>\n        <Search setQuery={setQuery} />\n        <Filter setLicense={setLicense} />\n      </header>\n      <GitHubInfo license={license} query={query} />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}